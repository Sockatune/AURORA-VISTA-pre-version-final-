"""
Cerebro de IA - Integraci√≥n con OpenRouter
ARCHIVO ACTUALIZADO: Ahora usa OpenRouter en lugar de Gemini
"""
import os
import logging
from pathlib import Path

# Configurar logging
logger = logging.getLogger(__name__)

# Intentar importar las configuraciones
try:
    from config.openrouter_client import is_api_configured, get_client
    from config.settings import ASSISTANT_PROMPT
    OPENROUTER_DISPONIBLE = True
except ImportError as e:
    logger.error(f"Error importando configuraci√≥n de OpenRouter: {e}")
    OPENROUTER_DISPONIBLE = False


def generar_respuesta(pregunta: str) -> str:
    """
    Genera una respuesta usando OpenRouter (DeepSeek)
    
    Args:
        pregunta: Pregunta o comando del usuario
        
    Returns:
        str: Respuesta generada por la IA
    """
    if not OPENROUTER_DISPONIBLE:
        return (
            "Error de configuraci√≥n: No se pudo cargar OpenRouter. "
            "Verifica que el archivo config/openrouter_client.py existe."
        )
    
    if not is_api_configured():
        logger.warning("API de OpenRouter no configurada")
        return (
            "Lo siento, no puedo conectarme a OpenRouter en este momento. "
            "Verifica que hayas configurado OPENROUTER_API_KEY en el archivo .env\n\n"
            "Para obtener tu API key GRATIS:\n"
            "1. Ve a https://openrouter.ai/\n"
            "2. Haz login con GitHub\n"
            "3. Ve a 'Keys' y crea una nueva\n"
            "4. C√≥piala en el archivo .env"
        )
    
    try:
        logger.info(f"Generando respuesta para: {pregunta[:50]}...")
        
        # Obtener cliente y generar respuesta
        client = get_client()
        respuesta = client.simple_chat(
            prompt=pregunta,
            system_prompt=ASSISTANT_PROMPT
        )
        
        if not respuesta:
            logger.warning("Respuesta vac√≠a recibida")
            return "Lo siento, no pude generar una respuesta. ¬øPodr√≠as reformular tu pregunta?"
        
        logger.info("Respuesta generada exitosamente")
        
        # Limpiar asteriscos del markdown
        respuesta = respuesta.replace('*', '')
        
        return respuesta
        
    except Exception as e:
        logger.error(f"Error al generar respuesta: {e}")
        error_msg = str(e)
        
        # Mensajes de error m√°s amigables
        if "API key" in error_msg or "401" in error_msg:
            return (
                "Error de autenticaci√≥n con OpenRouter. "
                "Verifica que tu OPENROUTER_API_KEY en .env sea correcta."
            )
        elif "network" in error_msg.lower() or "connection" in error_msg.lower():
            return (
                "Error de conexi√≥n. Verifica tu conexi√≥n a internet y que "
                "https://openrouter.ai est√© accesible."
            )
        else:
            return f"Lo siento, ocurri√≥ un error al procesar tu solicitud: {error_msg}"


def verificar_conexion() -> bool:
    """
    Verifica que la conexi√≥n con OpenRouter est√© funcionando
    
    Returns:
        bool: True si la conexi√≥n es exitosa
    """
    if not OPENROUTER_DISPONIBLE:
        return False
    
    try:
        logger.info("Verificando conexi√≥n con OpenRouter...")
        respuesta = generar_respuesta("Di 'OK' si me escuchas")
        resultado = "ok" in respuesta.lower()
        
        if resultado:
            logger.info("‚úÖ Conexi√≥n verificada correctamente")
        else:
            logger.warning("‚ö†Ô∏è  Respuesta inesperada en verificaci√≥n")
        
        return resultado
        
    except Exception as e:
        logger.error(f"Error en verificaci√≥n de conexi√≥n: {e}")
        return False


def obtener_info_api() -> dict:
    """
    Obtiene informaci√≥n sobre la configuraci√≥n de la API
    
    Returns:
        dict: Informaci√≥n de la API
    """
    if not OPENROUTER_DISPONIBLE:
        return {
            "provider": "OpenRouter",
            "disponible": False,
            "configurado": False,
            "conectado": False,
            "error": "M√≥dulo OpenRouter no disponible"
        }
    
    try:
        if is_api_configured():
            client = get_client()
            info = client.get_model_info()
            info["conectado"] = True
            return info
        else:
            return {
                "provider": "OpenRouter",
                "disponible": True,
                "configurado": False,
                "conectado": False
            }
    except Exception as e:
        logger.error(f"Error al obtener info de API: {e}")
        return {
            "provider": "OpenRouter",
            "disponible": True,
            "configurado": False,
            "conectado": False,
            "error": str(e)
        }


# ============== COMPATIBILIDAD CON C√ìDIGO VIEJO ==============
# Estas variables ya NO se usan, pero las dejamos por compatibilidad
API_KEY = None
model = None

print("‚úÖ Cerebro de OpenRouter cargado correctamente (versi√≥n actualizada)")


# ============== TEST ==============
if __name__ == "__main__":
    # Configurar logging para el test
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    print("=" * 60)
    print(" TEST DEL CEREBRO DE IA - OPENROUTER")
    print("=" * 60)
    
    # Test 1: Verificar configuraci√≥n
    print("\n1Ô∏è‚É£  Verificando configuraci√≥n...")
    info = obtener_info_api()
    for key, value in info.items():
        print(f"   {key}: {value}")
    
    # Test 2: Verificar conexi√≥n
    print("\n2Ô∏è‚É£  Verificando conexi√≥n...")
    if verificar_conexion():
        print("   ‚úÖ Conexi√≥n OK")
    else:
        print("   ‚ùå Conexi√≥n fallida")
        print("   üí° Verifica tu OPENROUTER_API_KEY en .env")
    
    # Test 3: Generar respuesta
    print("\n3Ô∏è‚É£  Generando respuesta de prueba...")
    pregunta = "Hola, ¬øc√≥mo est√°s?"
    print(f"   Pregunta: {pregunta}")
    respuesta = generar_respuesta(pregunta)
    print(f"   Respuesta: {respuesta[:100]}...")
    
    print("\n" + "=" * 60)
    print(" Tests completados")
    print("=" * 60)